// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to the Rust library
class MarkdownRust {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MarkdownRust(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MarkdownRust.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Parses a Markdown string and returns a JSON string of the AST.
  /// The returned pointer should be freed by [free_string].
  ffi.Pointer<ffi.Int8> parse_markdown(
    ffi.Pointer<ffi.Int8> ptr,
  ) {
    return _parse_markdown(
      ptr,
    );
  }

  late final _parse_markdown_ptr =
      _lookup<ffi.NativeFunction<_c_parse_markdown>>('parse_markdown');
  late final _dart_parse_markdown _parse_markdown =
      _parse_markdown_ptr.asFunction<_dart_parse_markdown>();

  /// Parses a Markdown string and returns HTML.
  /// The returned pointer should be freed by [free_string].
  ffi.Pointer<ffi.Int8> parse_markdown_xml(
    ffi.Pointer<ffi.Int8> ptr,
  ) {
    return _parse_markdown_xml(
      ptr,
    );
  }

  late final _parse_markdown_xml_ptr =
      _lookup<ffi.NativeFunction<_c_parse_markdown_xml>>('parse_markdown_xml');
  late final _dart_parse_markdown_xml _parse_markdown_xml =
      _parse_markdown_xml_ptr.asFunction<_dart_parse_markdown_xml>();

  /// Parses a Markdown string and returns a list of [CElement]s.
  /// The returned pointer should be freed by [free_elements].
  ffi.Pointer<Slice_CElement> parse_markdown_ast(
    ffi.Pointer<ffi.Int8> ptr,
  ) {
    return _parse_markdown_ast(
      ptr,
    );
  }

  late final _parse_markdown_ast_ptr =
      _lookup<ffi.NativeFunction<_c_parse_markdown_ast>>('parse_markdown_ast');
  late final _dart_parse_markdown_ast _parse_markdown_ast =
      _parse_markdown_ast_ptr.asFunction<_dart_parse_markdown_ast>();

  void free_elements(
    ffi.Pointer<Slice_CElement> ptr,
  ) {
    return _free_elements(
      ptr,
    );
  }

  late final _free_elements_ptr =
      _lookup<ffi.NativeFunction<_c_free_elements>>('free_elements');
  late final _dart_free_elements _free_elements =
      _free_elements_ptr.asFunction<_dart_free_elements>();

  /// Similar to [parse_markdown], but uses the algorithm from [parse_markdown_ast].
  /// The returned pointer should be freed by [free_string].
  ffi.Pointer<ffi.Int8> parse_markdown_ast_json(
    ffi.Pointer<ffi.Int8> ptr,
  ) {
    return _parse_markdown_ast_json(
      ptr,
    );
  }

  late final _parse_markdown_ast_json_ptr =
      _lookup<ffi.NativeFunction<_c_parse_markdown_ast_json>>(
          'parse_markdown_ast_json');
  late final _dart_parse_markdown_ast_json _parse_markdown_ast_json =
      _parse_markdown_ast_json_ptr.asFunction<_dart_parse_markdown_ast_json>();

  void free_string(
    ffi.Pointer<ffi.Int8> ptr,
  ) {
    return _free_string(
      ptr,
    );
  }

  late final _free_string_ptr =
      _lookup<ffi.NativeFunction<_c_free_string>>('free_string');
  late final _dart_free_string _free_string =
      _free_string_ptr.asFunction<_dart_free_string>();

  ffi.Pointer<ffi.Int8> as_text(
    ffi.Pointer<CElement> el,
  ) {
    return _as_text(
      el,
    );
  }

  late final _as_text_ptr = _lookup<ffi.NativeFunction<_c_as_text>>('as_text');
  late final _dart_as_text _as_text = _as_text_ptr.asFunction<_dart_as_text>();

  ffi.Pointer<CHtmlTag> as_tag(
    ffi.Pointer<CElement> el,
  ) {
    return _as_tag(
      el,
    );
  }

  late final _as_tag_ptr = _lookup<ffi.NativeFunction<_c_as_tag>>('as_tag');
  late final _dart_as_tag _as_tag = _as_tag_ptr.asFunction<_dart_as_tag>();
}

abstract class CTag {
  static const int Text = 0;
  static const int Tag = 1;
}

abstract class Tags {
  static const int Paragraph = 0;
  static const int H1 = 1;
  static const int H2 = 2;
  static const int H3 = 3;
  static const int H4 = 4;
  static const int H5 = 5;
  static const int H6 = 6;
  static const int Blockquote = 7;
  static const int Pre = 8;
  static const int OrderedList = 9;
  static const int UnorderedList = 10;
  static const int ListItem = 11;
  static const int Table = 12;
  static const int TableHead = 13;
  static const int TableRow = 14;
  static const int TableCell = 15;
  static const int TableHeaderCell = 16;
  static const int Emphasis = 17;
  static const int Strong = 18;
  static const int Strikethrough = 19;
  static const int Anchor = 20;
  static const int Image = 21;
  static const int Code = 22;
  static const int HardBreak = 23;
  static const int Ruler = 24;
}

abstract class TextAlign {
  static const int None = 0;
  static const int Left = 1;
  static const int Center = 2;
  static const int Right = 3;
}

/// Dart does not support enum strcts (20210721),
/// so we have to create an adapter struct like this.
class CElement extends ffi.Struct {
  @ffi.Int32()
  external int _0;

  external ffi.Pointer<ffi.Void> _1;
}

/// Wrapper over Rust's slice type.
///
/// The main functionality comes from [rust_slice_to_c], a function
/// that convers Rust slices into Slice pointers.
///
/// The accompanying `impl_slice_destructor` macro, or the [free_slice]
/// function can be used to define destructors for a particular type.
class Slice_CElement extends ffi.Struct {
  external ffi.Pointer<CElement> ptr;

  @ffi.Int32()
  external int length;
}

/// FFI-compatible adapter for [HtmlTag].
class CHtmlTag extends ffi.Struct {
  /// HTML tag.
  @ffi.Int32()
  external int t;

  /// List of children.
  external ffi.Pointer<Slice_CElement> c;

  /// empty or 'text-align: left|center|right'
  @ffi.Int32()
  external int style;

  /// image src
  external ffi.Pointer<ffi.Int8> src;

  /// anchor href
  external ffi.Pointer<ffi.Int8> href;

  /// for checkbox only
  external ffi.Pointer<ffi.Int8> typ;

  /// for checkbox only
  external ffi.Pointer<ffi.Int8> checked;
}

typedef _c_parse_markdown = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _dart_parse_markdown = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _c_parse_markdown_xml = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _dart_parse_markdown_xml = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _c_parse_markdown_ast = ffi.Pointer<Slice_CElement> Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _dart_parse_markdown_ast = ffi.Pointer<Slice_CElement> Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _c_free_elements = ffi.Void Function(
  ffi.Pointer<Slice_CElement> ptr,
);

typedef _dart_free_elements = void Function(
  ffi.Pointer<Slice_CElement> ptr,
);

typedef _c_parse_markdown_ast_json = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _dart_parse_markdown_ast_json = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _c_free_string = ffi.Void Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _dart_free_string = void Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _c_as_text = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<CElement> el,
);

typedef _dart_as_text = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<CElement> el,
);

typedef _c_as_tag = ffi.Pointer<CHtmlTag> Function(
  ffi.Pointer<CElement> el,
);

typedef _dart_as_tag = ffi.Pointer<CHtmlTag> Function(
  ffi.Pointer<CElement> el,
);
