// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `root.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct Element {
    // message oneof groups
    pub value: ::std::option::Option<Element_oneof_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Element {
    fn default() -> &'a Element {
        <Element as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Element_oneof_value {
    tag(Tag),
    text(::std::string::String),
}

impl Element {
    pub fn new() -> Element {
        ::std::default::Default::default()
    }

    // .flutter_playground.Tag tag = 1;


    pub fn get_tag(&self) -> &Tag {
        match self.value {
            ::std::option::Option::Some(Element_oneof_value::tag(ref v)) => v,
            _ => <Tag as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_tag(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_tag(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Element_oneof_value::tag(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: Tag) {
        self.value = ::std::option::Option::Some(Element_oneof_value::tag(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tag(&mut self) -> &mut Tag {
        if let ::std::option::Option::Some(Element_oneof_value::tag(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Element_oneof_value::tag(Tag::new()));
        }
        match self.value {
            ::std::option::Option::Some(Element_oneof_value::tag(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tag(&mut self) -> Tag {
        if self.has_tag() {
            match self.value.take() {
                ::std::option::Option::Some(Element_oneof_value::tag(v)) => v,
                _ => panic!(),
            }
        } else {
            Tag::new()
        }
    }

    // string text = 2;


    pub fn get_text(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(Element_oneof_value::text(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_text(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Element_oneof_value::text(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(Element_oneof_value::text(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Element_oneof_value::text(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Element_oneof_value::text(::std::string::String::new()));
        }
        match self.value {
            ::std::option::Option::Some(Element_oneof_value::text(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        if self.has_text() {
            match self.value.take() {
                ::std::option::Option::Some(Element_oneof_value::text(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for Element {
    fn is_initialized(&self) -> bool {
        if let Some(Element_oneof_value::tag(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Element_oneof_value::tag(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Element_oneof_value::text(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Element_oneof_value::tag(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Element_oneof_value::text(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Element_oneof_value::tag(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Element_oneof_value::text(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Element {
        Element::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Tag>(
                "tag",
                Element::has_tag,
                Element::get_tag,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "text",
                Element::has_text,
                Element::get_text,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Element>(
                "Element",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Element {
        static instance: ::protobuf::rt::LazyV2<Element> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Element::new)
    }
}

impl ::protobuf::Clear for Element {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Element {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Element {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Tag {
    // message fields
    pub tag: Tag_Tags,
    pub children: ::protobuf::RepeatedField<Element>,
    pub style: ::std::string::String,
    pub href: ::std::string::String,
    pub checked: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tag {
    fn default() -> &'a Tag {
        <Tag as ::protobuf::Message>::default_instance()
    }
}

impl Tag {
    pub fn new() -> Tag {
        ::std::default::Default::default()
    }

    // .flutter_playground.Tag.Tags tag = 1;


    pub fn get_tag(&self) -> Tag_Tags {
        self.tag
    }
    pub fn clear_tag(&mut self) {
        self.tag = Tag_Tags::Paragraph;
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: Tag_Tags) {
        self.tag = v;
    }

    // repeated .flutter_playground.Element children = 2;


    pub fn get_children(&self) -> &[Element] {
        &self.children
    }
    pub fn clear_children(&mut self) {
        self.children.clear();
    }

    // Param is passed by value, moved
    pub fn set_children(&mut self, v: ::protobuf::RepeatedField<Element>) {
        self.children = v;
    }

    // Mutable pointer to the field.
    pub fn mut_children(&mut self) -> &mut ::protobuf::RepeatedField<Element> {
        &mut self.children
    }

    // Take field
    pub fn take_children(&mut self) -> ::protobuf::RepeatedField<Element> {
        ::std::mem::replace(&mut self.children, ::protobuf::RepeatedField::new())
    }

    // string style = 3;


    pub fn get_style(&self) -> &str {
        &self.style
    }
    pub fn clear_style(&mut self) {
        self.style.clear();
    }

    // Param is passed by value, moved
    pub fn set_style(&mut self, v: ::std::string::String) {
        self.style = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_style(&mut self) -> &mut ::std::string::String {
        &mut self.style
    }

    // Take field
    pub fn take_style(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.style, ::std::string::String::new())
    }

    // string href = 4;


    pub fn get_href(&self) -> &str {
        &self.href
    }
    pub fn clear_href(&mut self) {
        self.href.clear();
    }

    // Param is passed by value, moved
    pub fn set_href(&mut self, v: ::std::string::String) {
        self.href = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_href(&mut self) -> &mut ::std::string::String {
        &mut self.href
    }

    // Take field
    pub fn take_href(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.href, ::std::string::String::new())
    }

    // bool checked = 5;


    pub fn get_checked(&self) -> bool {
        self.checked
    }
    pub fn clear_checked(&mut self) {
        self.checked = false;
    }

    // Param is passed by value, moved
    pub fn set_checked(&mut self, v: bool) {
        self.checked = v;
    }
}

impl ::protobuf::Message for Tag {
    fn is_initialized(&self) -> bool {
        for v in &self.children {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tag, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.children)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.style)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.href)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.checked = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tag != Tag_Tags::Paragraph {
            my_size += ::protobuf::rt::enum_size(1, self.tag);
        }
        for value in &self.children {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.style.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.style);
        }
        if !self.href.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.href);
        }
        if self.checked != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tag != Tag_Tags::Paragraph {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.tag))?;
        }
        for v in &self.children {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.style.is_empty() {
            os.write_string(3, &self.style)?;
        }
        if !self.href.is_empty() {
            os.write_string(4, &self.href)?;
        }
        if self.checked != false {
            os.write_bool(5, self.checked)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tag {
        Tag::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Tag_Tags>>(
                "tag",
                |m: &Tag| { &m.tag },
                |m: &mut Tag| { &mut m.tag },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Element>>(
                "children",
                |m: &Tag| { &m.children },
                |m: &mut Tag| { &mut m.children },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "style",
                |m: &Tag| { &m.style },
                |m: &mut Tag| { &mut m.style },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "href",
                |m: &Tag| { &m.href },
                |m: &mut Tag| { &mut m.href },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "checked",
                |m: &Tag| { &m.checked },
                |m: &mut Tag| { &mut m.checked },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Tag>(
                "Tag",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Tag {
        static instance: ::protobuf::rt::LazyV2<Tag> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Tag::new)
    }
}

impl ::protobuf::Clear for Tag {
    fn clear(&mut self) {
        self.tag = Tag_Tags::Paragraph;
        self.children.clear();
        self.style.clear();
        self.href.clear();
        self.checked = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tag {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Tag_Tags {
    Paragraph = 0,
    H1 = 1,
    H2 = 2,
    H3 = 3,
    H4 = 4,
    H5 = 5,
    H6 = 6,
    Blockquote = 7,
    Pre = 8,
    OrderedList = 9,
    UnorderedList = 10,
    ListItem = 11,
    Table = 12,
    TableHead = 13,
    TableRow = 14,
    TableCell = 15,
    TableHeaderCell = 16,
    Emphasis = 17,
    Strong = 18,
    Strikethrough = 19,
    Anchor = 20,
    Image = 21,
    Code = 22,
    HardBreak = 23,
    Ruler = 24,
    Checkbox = 25,
}

impl ::protobuf::ProtobufEnum for Tag_Tags {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Tag_Tags> {
        match value {
            0 => ::std::option::Option::Some(Tag_Tags::Paragraph),
            1 => ::std::option::Option::Some(Tag_Tags::H1),
            2 => ::std::option::Option::Some(Tag_Tags::H2),
            3 => ::std::option::Option::Some(Tag_Tags::H3),
            4 => ::std::option::Option::Some(Tag_Tags::H4),
            5 => ::std::option::Option::Some(Tag_Tags::H5),
            6 => ::std::option::Option::Some(Tag_Tags::H6),
            7 => ::std::option::Option::Some(Tag_Tags::Blockquote),
            8 => ::std::option::Option::Some(Tag_Tags::Pre),
            9 => ::std::option::Option::Some(Tag_Tags::OrderedList),
            10 => ::std::option::Option::Some(Tag_Tags::UnorderedList),
            11 => ::std::option::Option::Some(Tag_Tags::ListItem),
            12 => ::std::option::Option::Some(Tag_Tags::Table),
            13 => ::std::option::Option::Some(Tag_Tags::TableHead),
            14 => ::std::option::Option::Some(Tag_Tags::TableRow),
            15 => ::std::option::Option::Some(Tag_Tags::TableCell),
            16 => ::std::option::Option::Some(Tag_Tags::TableHeaderCell),
            17 => ::std::option::Option::Some(Tag_Tags::Emphasis),
            18 => ::std::option::Option::Some(Tag_Tags::Strong),
            19 => ::std::option::Option::Some(Tag_Tags::Strikethrough),
            20 => ::std::option::Option::Some(Tag_Tags::Anchor),
            21 => ::std::option::Option::Some(Tag_Tags::Image),
            22 => ::std::option::Option::Some(Tag_Tags::Code),
            23 => ::std::option::Option::Some(Tag_Tags::HardBreak),
            24 => ::std::option::Option::Some(Tag_Tags::Ruler),
            25 => ::std::option::Option::Some(Tag_Tags::Checkbox),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Tag_Tags] = &[
            Tag_Tags::Paragraph,
            Tag_Tags::H1,
            Tag_Tags::H2,
            Tag_Tags::H3,
            Tag_Tags::H4,
            Tag_Tags::H5,
            Tag_Tags::H6,
            Tag_Tags::Blockquote,
            Tag_Tags::Pre,
            Tag_Tags::OrderedList,
            Tag_Tags::UnorderedList,
            Tag_Tags::ListItem,
            Tag_Tags::Table,
            Tag_Tags::TableHead,
            Tag_Tags::TableRow,
            Tag_Tags::TableCell,
            Tag_Tags::TableHeaderCell,
            Tag_Tags::Emphasis,
            Tag_Tags::Strong,
            Tag_Tags::Strikethrough,
            Tag_Tags::Anchor,
            Tag_Tags::Image,
            Tag_Tags::Code,
            Tag_Tags::HardBreak,
            Tag_Tags::Ruler,
            Tag_Tags::Checkbox,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Tag_Tags>("Tag.Tags", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Tag_Tags {
}

impl ::std::default::Default for Tag_Tags {
    fn default() -> Self {
        Tag_Tags::Paragraph
    }
}

impl ::protobuf::reflect::ProtobufValue for Tag_Tags {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nroot.proto\x12\x12flutter_playground\"U\n\x07Element\x12+\n\x03tag\
    \x18\x01\x20\x01(\x0b2\x17.flutter_playground.TagH\0R\x03tag\x12\x14\n\
    \x04text\x18\x02\x20\x01(\tH\0R\x04textB\x07\n\x05value\"\x87\x04\n\x03T\
    ag\x12.\n\x03tag\x18\x01\x20\x01(\x0e2\x1c.flutter_playground.Tag.TagsR\
    \x03tag\x127\n\x08children\x18\x02\x20\x03(\x0b2\x1b.flutter_playground.\
    ElementR\x08children\x12\x14\n\x05style\x18\x03\x20\x01(\tR\x05style\x12\
    \x12\n\x04href\x18\x04\x20\x01(\tR\x04href\x12\x18\n\x07checked\x18\x05\
    \x20\x01(\x08R\x07checked\"\xd2\x02\n\x04Tags\x12\r\n\tParagraph\x10\0\
    \x12\x06\n\x02H1\x10\x01\x12\x06\n\x02H2\x10\x02\x12\x06\n\x02H3\x10\x03\
    \x12\x06\n\x02H4\x10\x04\x12\x06\n\x02H5\x10\x05\x12\x06\n\x02H6\x10\x06\
    \x12\x0e\n\nBlockquote\x10\x07\x12\x07\n\x03Pre\x10\x08\x12\x0f\n\x0bOrd\
    eredList\x10\t\x12\x11\n\rUnorderedList\x10\n\x12\x0c\n\x08ListItem\x10\
    \x0b\x12\t\n\x05Table\x10\x0c\x12\r\n\tTableHead\x10\r\x12\x0c\n\x08Tabl\
    eRow\x10\x0e\x12\r\n\tTableCell\x10\x0f\x12\x13\n\x0fTableHeaderCell\x10\
    \x10\x12\x0c\n\x08Emphasis\x10\x11\x12\n\n\x06Strong\x10\x12\x12\x11\n\r\
    Strikethrough\x10\x13\x12\n\n\x06Anchor\x10\x14\x12\t\n\x05Image\x10\x15\
    \x12\x08\n\x04Code\x10\x16\x12\r\n\tHardBreak\x10\x17\x12\t\n\x05Ruler\
    \x10\x18\x12\x0c\n\x08Checkbox\x10\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
